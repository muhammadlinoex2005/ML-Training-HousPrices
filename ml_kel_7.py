# -*- coding: utf-8 -*-
"""ML-KEL 7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d6DcyHlrED6J_wpnivSX3NEfBy5sqSiv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

df_rumah = pd.read_excel('/content/HARGA RUMAH JAKSEL.xlsx', header=1)

"""#Data Understanding"""

df_rumah.head()

df_rumah.shape

df_rumah.info()

"""Mencari missing value

tidak terdapat missing value pada data
"""

df_rumah.isna().values.any()

"""Melihat apakah ada data yang terduplikasi"""

df_rumah.duplicated().sum()
print(f"Jumlah duplikat: {df_rumah.duplicated().sum()}")

"""Melihat Outlier pada data"""

numerical_data = df_rumah.select_dtypes(include='number')
numerical_features = numerical_data.columns.tolist()

for kolom in numerical_data.columns:
    plt.figure(figsize=(5, 2))
    sns.boxplot(x=numerical_data[kolom])
    plt.title(f"Boxplot - {kolom}")
    plt.show()

numerik_df = df_rumah.select_dtypes(include='number')

# Dictionary untuk menyimpan outlier per kolom
outlier_dict = {}

for kolom in numerik_df.columns:
    Q1 = numerik_df[kolom].quantile(0.25)
    Q3 = numerik_df[kolom].quantile(0.75)
    IQR = Q3 - Q1

    # Batas bawah dan atas
    batas_bawah = Q1 - 1.5 * IQR
    batas_atas = Q3 + 1.5 * IQR

    # Cek data yang berada di luar batas
    outlier = df_rumah[(numerik_df[kolom] < batas_bawah) | (numerik_df[kolom] > batas_atas)]

    # Simpan hasilnya
    outlier_dict[kolom] = outlier

# Menampilkan jumlah outlier tiap kolom
for kolom, outlier in outlier_dict.items():
    print(f"{kolom}: {len(outlier)} outlier")

"""#Data Preprocessing

Kami berencana untuk menggunakan algoritma linear regression pada pembuatan modelnya, karena memiliki kelebihan mudah diiplementasikan. Akan tetapi model ini memiliki kekurangan yaitu sensitif pada outlier.

Karena isi pada kolom KOTA semuanya sama, maka akan kami hapus

Membersihkan data yang terduplikasi
"""

df_bersih = df_rumah.copy()
df_bersih = df_rumah.drop_duplicates()
df_bersih.duplicated().sum()
print(f"Jumlah duplikat: {df_bersih.duplicated().sum()}")

df_bersih.info()

"""Karena kolom kota memiliki isi yang sama, maka akan dihapus"""

df_bersih['KOTA'].unique()
df_bersih.drop(columns='KOTA', inplace=True)

df_bersih.info()

"""Karena pada data ini kolom garasi masih berupa objek, makan akan kami ubah menjadi berbentuk numerik.

1 = ADA garasi 0 = TIDAK ADA garasi
"""

df_bersih['GRS'] = df_bersih['GRS'].str.strip().str.upper()
df_bersih.loc[:, 'GRS'] = df_bersih['GRS'].map({'ADA': 1, 'TIDAK ADA': 0})

df_bersih.head()

"""Karena Linear Regression sensitif terhadap outlier, maka outlier yang ekstrim pada data akan di hapus"""

columns = ['HARGA', 'LT', 'LB', 'JKT', 'JKM']

for col in columns:
    Q1 = df_bersih[col].quantile(0.25)
    Q3 = df_bersih[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df_bersih = df_bersih[(df_bersih[col] >= lower_bound) & (df_bersih[col] <= upper_bound)]

df_bersih.info()

"""Melakukan scalling dan splitting data"""

# Pisahkan fitur dan target dari df_bersih
X = df_bersih.drop('HARGA', axis=1).values
y = df_bersih['HARGA'].values

# Inisialisasi K-Fold
kf = KFold(n_splits=5, shuffle=True, random_state=42)
mae_scores = []

# K-Fold training dan evaluasi
for train_index, val_index in kf.split(X):
    X_train, X_val = X[train_index], X[val_index]
    y_train, y_val = y[train_index], y[val_index]

    # Scaling hanya pada data training
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_val_scaled = scaler.transform(X_val)

     # Train model
    model = LinearRegression()
    model.fit(X_train_scaled, y_train)

    y_pred = model.predict(X_val_scaled)
    mae = mean_absolute_error(y_val, y_pred)
    mae_scores.append(mae)

    # Rata-rata MAE dari semua fold
    print("Rata-rata MAE:", np.mean(mae_scores))

data_baru = {
    'LT': [22],
    'LB': [38],
    'JKT': [2],
    'JKM': [1],
    'GRS': [0]
}
df_data_baru = pd.DataFrame(data_baru)

# Melakukan prediksi
prediksi_harga = model.predict(df_data_baru)

print(f"Prediksi Harga Rumah: {prediksi_harga[0]:,.2f}")

import pickle

# This is the object you want to save
my_data = {'name': 'example', 'version': 1.0}

filename = 'machinelearning.pkl'

# Open the file in write binary mode
with open(filename, 'wb') as file:
    # Dump the object to the file
    pickle.dump(my_data, file)

print(f"Data saved to {filename}")

# To load it back (for testing or later use in another script/notebook):
# with open(filename, 'rb') as file:
#     loaded_data = pickle.load(file)
# print(f"Loaded data: {loaded_data}")